#!/bin/bash

DropPod="/usr/local/DropPod"

command=$1
shift

case "$command" in
  init )
    git clone --depth 1 git://github.com/DropPod/dotapp.git ${DropPod}/modules/dotapp
    git clone --depth 1 git://github.com/DropPod/repository.git ${DropPod}/modules/repository
    ;;
  update )
    cd $DropPod/modules/baseline
    git pull
    ;;
  pod | pods )
    tmpfiles=$($0 __cache__ "$@")

    modules=$(cat $tmpfiles | grep '^#@' | sed 's/^#@[ \t]*//;s/\//-/' | sort -u)
    $0 module $modules

    cat <(echo "include baseline::types") $tmpfiles | ${DropPod}/binstubs/puppet apply
    ;;

  test )
    tmpfiles=$($0 __cache__ "$@")

    modules=$(cat $tmpfiles | grep '^#@' | sed 's/^#@[ \t]*//;s/\//-/' | sort -u)
    for mod in $modules; do
      (${DropPod}/binstubs/puppet module list | grep -q '$mod') || exit 1
    done

    cat <(echo "include baseline::types") $tmpfiles | ${DropPod}/binstubs/puppet apply --noop 2>&1 | grep '(noop)' -qc
    [[ $? -ne 0 ]]
    exit $?
    ;;

  module )
    for mod; do
      ${DropPod}/binstubs/puppet module install "$mod" || exit 1
    done

    modules="$(comm -12 <(ls ${DropPod}/modules/*/manifests/init.pp | sed 's/.*modules\/\([a-z]*\)\/.*/\1/') <(grep -R '^\s*class [a-z_:]\+ {' ${DropPod}/modules/*/manifests/init.pp | sed 's/.*class \([a-z]*\).*/\1/') | sed 's/^/include /')"
    ${DropPod}/binstubs/puppet apply --noop -e "include baseline::types" -e "$modules" &>/dev/null ||
    sudo ${DropPod}/binstubs/puppet apply -e "include baseline::types" -e "$modules"

    $0 sudo
    ;;

  sudo )
    modules="$(ls $DropPod/modules/*/manifests/sudo.pp | sed 'G;s/.*modules\/\([a-z]*\)\/.*/include \1::sudo/')"
    ${DropPod}/binstubs/puppet apply --noop -e "include baseline::types" -e "$modules" &>/dev/null ||
    sudo ${DropPod}/binstubs/puppet apply -e "include baseline::types" -e "$modules"
    ;;

  __cache__ )
    for pod; do
      tmpfile=$(mktemp -t "$(basename $0).XXXXXX")
      /usr/bin/ruby -r open-uri -e "File.write('$tmpfile', open('$pod').read + \"\n\")"
      echo $tmpfile
    done
    ;;
  * )
    echo "Unrecognized command '${command}'"
    exit 1
esac
